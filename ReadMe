What is Javascript?


Strings
* Strings in JavaScript are primitive data types and immutable, used for displaying and working with text.
* They are fundamental concepts in programming and can be created and viewed using single quotes, double quotes, or backticks.
* Strings using double quotes and single quotes are the same, but there is no official preference.
* Template literals use backticks and work similarly to regular strings.
* To view the output, print it to the console or send an alert popup to the browser. 
* Concatenating strings, storing strings in variables, and using quotes, apostrophes, and newlines within strings are also important.

Arrays
* Array is a special data structure designed for storing ordered collections, as objects are not suitable for such situations.

Functions
A function is a group of reusable code that can be called anywhere in a program, reducing the need for repetitive code. 
* JavaScript supports modular code writing using functions, allowing programmers to divide large programs into manageable ones. 
* To write your own functions in JavaScript, define them using the function keyword, unique function name, parameter list, and statement block surrounded by curly braces.

Boolens
A Boolean is a value that represents try or false.
* They are used to evaluate certain circumstances.
* Boolens are also used in of statements. 
* With the if statement logical order is important.

Type Conversions
* In JavaScript, type conversion is the process of changing data from one type to another. This can happen automatically by JavaScript itself, or you can explicitly convert a value using a function.

There are three main types of conversions:
- To string: This is common when you want to display a value or use it in a string context. You can use the String() function or the toString() method of the value itself.
- To number: This is important for mathematical operations. You can use the Number() function to convert strings or booleans to numbers.
- To boolean: This is used in logical operations. You can use the Boolean() function, but JavaScript also has some automatic conversions where certain values like 0, empty strings, and null become false.

Methods Used For Numbers 
• Number(): Returns converted number.
• ParseFloat(): Parses argument to return float.
• ParseInt(): Parses argument to return integer.

JavaScript Methods
• toString(): Converts numeric values into a string.
• toExponential(): Rounds numbers and writes them with exponential notation.
• toFixed(): Converts numbers into a string with a specific decimal amount.
• toPrecision(): Converts numbers into a string with a specified length.
• valueOf(): Returns a number as a number, converting numbers into primitive values.

Converting Variables to Numbers  
• Number(): Converts JavaScript variables into numbers.
• parseInt(): Creates a JavaScript integer by parsing a string and returning the number.
• parseFloat(): Parses a string and returns a floating point number.

The Document Object Model and JavaScript Syntax Overview

• The Document Object Model is an API for HTML and XML documents, providing a structural representation of the document and defining its access from script.
• It connects web pages to scripts or programming languages, allowing a structured group of nodes.

Definition of JavaScript Objects
• A JavaScript object is any scriptable HTML element within a document that can be accessed through the JavaScript language.
• Core objects are not associated with HTML elements but with the language itself, while homemade objects are not.
• Examples of JavaScript objects include the browser window, document, form, and image.

Property in JavaScript
• Properties are characteristics of an object, similar to the relationship between an HTML tag attribute and the tag it belongs to.
• A property can also be an object, similar to the relationship between an <option> tag and the <select> tag.
• A document, form, and image are both properties of the document object but also objects themselves.

Methods in JavaScript
• Methods are actions that can be applied directly to objects, causing a web page to react to the end user.
• Method parameters are necessary for a method to accomplish its task.
• Examples of JavaScript methods include alert(), write(), and focus().

Core APIs in DOM Programming
• DOM programming uses document and window objects as interfaces.
• Window object represents the browser, while document object is the root of the document.
• Element inherits from the generic Node interface, providing methods and properties on individual elements.
• Common APIs include document.getElementById(id), document.getElementsByTagName(name), document.createElement(name), parentNode.appendChild(node), element.innerHTML, element.style.left, element.setAttribute, element.getAttribute, element.addEventListener, window._content, window.onload, window.dump(), window.scrollTo().
• Window reference is the only exception to the complete object containment hierarchy reference rule.
• Omitting a method asserts it is being invoked on the window object.

 Activity 1
* DOM Syntax: The Language for Interacting with Webpages

* DOM (Document Object Model) syntax isn't a separate syntax from JavaScript itself. It's a way of using JavaScript's core syntax to interact with the structure and content of a webpage represented by the DOM. 
Here's how it works:
1. The DOM: A Tree-Like Map
The DOM takes your HTML code and creates a hierarchical tree structure.
Each element in your HTML (headings, paragraphs, buttons, etc.) becomes a node in this tree.
Nodes have properties (like content or style) and methods (actions you can perform on them).
2. JavaScript Syntax: Talking to the DOM
JavaScript syntax provides the tools to access and manipulate the DOM tree.
You use methods like getElementById, getElementsByTagName, and querySelector to find specific nodes based on their ID, tag name, or CSS selectors.
Once you find a node, you can use its properties and methods to:
 - Change content (text, images, etc.)
 - Modify styles (color, font size, visibility)
 - Add or remove elements
 - Respond to user interactions (clicks, form submissions)

* Pseudocode for Button Interaction
Here's an example of pseudocode using JavaScript syntax to add an event listener to a button:

JavaScript
// Find the button using its ID
buttonElement = document.getElementById("myButton");

// Define a function to run when the button is clicked
function handleClick() {
  // Change the button's text
  buttonElement.textContent = "Button Clicked!";

  // Optionally, perform other actions (e.g., hide an element)
}

// Add an event listener to the button
buttonElement.addEventListener("click", handleClick);

*Purpose of JavaScript
javaScript makes webpages interactive and dynamic. It goes beyond static HTML by allowing you to:
 - Create dynamic content based on user input (e.g., search results)
 - Add animations and visual effects
 - Respond to user interactions (like button clicks, form submissions)
 - Validate form data before submission
 - Create interactive games and applications

JavaScript Functions and Object Creation

• JavaScript allows calling one function from another, allowing for "nesting" functions.
• This allows for the creation of separate functions that perform specific tasks and run them together as a complete process.
• Examples include a function that calls three other functions, each returning a modified string of text.
• JavaScript is based on objects, making programming easier and streamlined.
• Making a new object involves defining the object in a user-defined function and using the new keyword to create or instantiate the object.

Defining New Properties to Objects in JavaScript

• Objects can be assigned new properties after creation.
• Property names can be included in the object function for simultaneous creation and property definition.
• The makeCustomer object function assigns a property to the current object.
• Three parameters: customer's name, address, and phone number, are used to define the properties.
• JavaScript allows unlimited property assignments to an object.

Assignment Operators and Return Value

• Assignment operators assign values to left operands based on their right operands.
• Simple assignment operators (=) assign the value of their right operand to its left operand.
• Compound assignment operators are shorthand for operations listed in the table.
• The return value matches the expression to the right of the "=" sign in the "Meaning" column.
• For logical assignments (x &&= y), (x ||= y), and (x??= y), the return value is the logical operation without the assignment.
• When chaining expressions, each assignment is evaluated right-to-left.

JavaScript Destructuring and Comparison Operators

• Destructuring assignment syntax allows for complex data extraction from arrays or objects.
• Comparison operators compare operands and return a logical value based on the comparison's truth.
• Operants can be numerical, string, logical, or object values.
• Strings are compared using Unicode values.
• If operands are not of the same type, JavaScript converts them to an appropriate type.
• Exceptions include the '===' and '!==' operators, which perform strict equality and inequality comparisons.

Arithmetic Operators
• Takes numerical values as operands.
• Returns single numerical value.
• Standard operators: addition (+), subtraction (-), multiplication (*), division (/).
• Functions similarly to other programming languages with floating point numbers.

Bitwise Operators 
• Treat operands as 32-bit set (zeros and ones).
• Operate on binary representations, returning standard JavaScript numerical values.
• Example: decimal number nine has binary representation of 1001.

Bitwise Logical Operators Overview
• Convert operands to 32-bit integers expressed by a series of bits (zeros and ones).
• Discard significant bits from numbers with more than 32 bits.
• Pair each bit in the first operand with the corresponding bit in the second operand.
• Apply the operator to each pair of bits, constructing the result bitwise.
• Example: binary representation of nine is 1001, binary representation of fifteen is 1111.

Bitwise shift operators
• Left shift (<<): Shifts the first operand to the left, discarding excess bits and introducing zero bits from the right.
• Sign-propagating right shift (>>): Shifts the first operand to the right, discarding excess bits and introducing zero bits from the left.
• Zero-fill right shift (>>>): Shifts the first operand to the right, discarding excess bits and introducing zero bits from the left.
• For non-negative numbers, both shifts yield the same result.

Logical Operators
• Typically used with Boolean values, returning a Boolean value.
• && and || operators return the value of one specified operand.
• AND (&&) returns true if both operands are true; otherwise, false.
• OR (||) returns true if either operand is true; otherwise, false.
• NOT (!) returns false if its single operand can be converted to true; otherwise, true.

Short-circuit Evaluation in Logic
• Logic expressions are evaluated left to right using "short-circuit" evaluation rules.
• False evaluates anything to false, and true evaluates anything to true.
• These evaluations are always correct, with no side effects.
• Modern code uses the Nullish coalescing operator (??) for the second case when the first expression is "nullish" or undefined.
• Defaults are provided when valid values like '' or 0 are valid for the first expression.

String Operators 
• Comparison operators for string values.
• Concatenation operator (+) for string concatenation.
• Shorthand assignment operator += for string concatenation.

Conditional Operator in JavaScript
• Only JavaScript operator taking three operands.
• Can have one of two values based on condition.
• True condition yields val1, false condition yields val2.
• Can be used like a standard operator.

Comma Operator Overview
• Evaluates both operands and returns last operand value.
• Primarily used in a for loop for updating multiple variables.
• Often used in separate statements for better clarity.

Unary Operator Overview
• Unary operation with only one operand.
• Delete: Deletes an object's property.
• Array elements deletion: Deletes elements from arrays, but is a bad practice.
• Typeof: Returns a string indicating the type of the unevaluated operand.
• void: Specifies an expression to be evaluated without returning a value.

Relational Operator
• Compares operands and returns a Boolean value based on whether the comparison is true.
• In: Returns true if the specified property is in the specified object.
• Instance of Operator in Java
 - Returns true if the object is of the specified object type.
 - Useful when confirming object type at runtime.
 - Can be used to branch exception-handling code based on exception type.

Operator Precedence
• Determines order of operators applied in expression evaluation.
• Overrided by using parentheses.
