What is Javascript?
* JS is a programming language which allows you to program web browsers or servers and working with technologies like node. 
* It creates interactivity and if it's working on a mobile device, then it is propably JavaScript.
* JavaScript Variables The key for variables is to use them to store information/data. 
* Variable is defined with akeyword "var".
* JavaScript variables can be declared in four ways:
* Automatically-> happens when you use a variable without explicitly declaring it, JavaScript automatically declares it.
* Using var-> it is considered outdated and should only be used for older browsers.
* Using Let-> allows you to declare variables that can be reassigned.
* Using const-> declares variables with constant values that cannot be changed.
* Compared to java and other programming languages, in JavaScript there is no specific way to differentiate a string to interger. In JS you use var then double qquotes to specify a string between interger

Increment and Decrement in JS

increment operator

Strings
* Strings in JavaScript are primitive data types and immutable, used for displaying and working with text.
* They are fundamental concepts in programming and can be created and viewed using single quotes, double quotes, or backticks.
* Strings using double quotes and single quotes are the same, but there is no official preference.
* Template literals use backticks and work similarly to regular strings.
* To view the output, print it to the console or send an alert popup to the browser. 
* Concatenating strings, storing strings in variables, and using quotes, apostrophes, and newlines within strings are also important.

Arrays
* Array is a special data structure designed for storing ordered collections, as objects are not suitable for such situations.

Functions
A function is a group of reusable code that can be called anywhere in a program, reducing the need for repetitive code. 
* JavaScript supports modular code writing using functions, allowing programmers to divide large programs into manageable ones. 
* To write your own functions in JavaScript, define them using the function keyword, unique function name, parameter list, and statement block surrounded by curly braces.

Boolens
A Boolean is a value that represents try or false.
* They are used to evaluate certain circumstances.
* Boolens are also used in of statements. 
* With the if statement logical order is important.

Type Conversions
* In JavaScript, type conversion is the process of changing data from one type to another. This can happen automatically by JavaScript itself, or you can explicitly convert a value using a function.

There are three main types of conversions:
- To string: This is common when you want to display a value or use it in a string context. You can use the String() function or the toString() method of the value itself.
- To number: This is important for mathematical operations. You can use the Number() function to convert strings or booleans to numbers.
- To boolean: This is used in logical operations. You can use the Boolean() function, but JavaScript also has some automatic conversions where certain values like 0, empty strings, and null become false.

Methods Used For Numbers 
• Number(): Returns converted number.
• ParseFloat(): Parses argument to return float.
• ParseInt(): Parses argument to return integer.

JavaScript Methods
• toString(): Converts numeric values into a string.
• toExponential(): Rounds numbers and writes them with exponential notation.
• toFixed(): Converts numbers into a string with a specific decimal amount.
• toPrecision(): Converts numbers into a string with a specified length.
• valueOf(): Returns a number as a number, converting numbers into primitive values.

Converting Variables to Numbers  
• Number(): Converts JavaScript variables into numbers.
• parseInt(): Creates a JavaScript integer by parsing a string and returning the number.
• parseFloat(): Parses a string and returns a floating point number.

The Document Object Model and JavaScript Syntax Overview

• The Document Object Model is an API for HTML and XML documents, providing a structural representation of the document and defining its access from script.
• It connects web pages to scripts or programming languages, allowing a structured group of nodes.

Definition of JavaScript Objects
• A JavaScript object is any scriptable HTML element within a document that can be accessed through the JavaScript language.
• Core objects are not associated with HTML elements but with the language itself, while homemade objects are not.
• Examples of JavaScript objects include the browser window, document, form, and image.

Property in JavaScript
• Properties are characteristics of an object, similar to the relationship between an HTML tag attribute and the tag it belongs to.
• A property can also be an object, similar to the relationship between an <option> tag and the <select> tag.
• A document, form, and image are both properties of the document object but also objects themselves.

Methods in JavaScript
• Methods are actions that can be applied directly to objects, causing a web page to react to the end user.
• Method parameters are necessary for a method to accomplish its task.
• Examples of JavaScript methods include alert(), write(), and focus().

Core APIs in DOM Programming
• DOM programming uses document and window objects as interfaces.
• Window object represents the browser, while document object is the root of the document.
• Element inherits from the generic Node interface, providing methods and properties on individual elements.
• Common APIs include document.getElementById(id), document.getElementsByTagName(name), document.createElement(name), parentNode.appendChild(node), element.innerHTML, element.style.left, element.setAttribute, element.getAttribute, element.addEventListener, window._content, window.onload, window.dump(), window.scrollTo().
• Window reference is the only exception to the complete object containment hierarchy reference rule.
• Omitting a method asserts it is being invoked on the window object.

 Activity 1
* DOM Syntax: The Language for Interacting with Webpages

* DOM (Document Object Model) syntax isn't a separate syntax from JavaScript itself. It's a way of using JavaScript's core syntax to interact with the structure and content of a webpage represented by the DOM. 
Here's how it works:
1. The DOM: A Tree-Like Map
The DOM takes your HTML code and creates a hierarchical tree structure.
Each element in your HTML (headings, paragraphs, buttons, etc.) becomes a node in this tree.
Nodes have properties (like content or style) and methods (actions you can perform on them).
2. JavaScript Syntax: Talking to the DOM
JavaScript syntax provides the tools to access and manipulate the DOM tree.
You use methods like getElementById, getElementsByTagName, and querySelector to find specific nodes based on their ID, tag name, or CSS selectors.
Once you find a node, you can use its properties and methods to:
 - Change content (text, images, etc.)
 - Modify styles (color, font size, visibility)
 - Add or remove elements
 - Respond to user interactions (clicks, form submissions)

* Pseudocode for Button Interaction
Here's an example of pseudocode using JavaScript syntax to add an event listener to a button:

JavaScript
// Find the button using its ID
buttonElement = document.getElementById("myButton");

// Define a function to run when the button is clicked
function handleClick() {
  // Change the button's text
  buttonElement.textContent = "Button Clicked!";

  // Optionally, perform other actions (e.g., hide an element)
}

// Add an event listener to the button
buttonElement.addEventListener("click", handleClick);

*Purpose of JavaScript
javaScript makes webpages interactive and dynamic. It goes beyond static HTML by allowing you to:
 - Create dynamic content based on user input (e.g., search results)
 - Add animations and visual effects
 - Respond to user interactions (like button clicks, form submissions)
 - Validate form data before submission
 - Create interactive games and applications

JavaScript Functions and Object Creation

• JavaScript allows calling one function from another, allowing for "nesting" functions.
• This allows for the creation of separate functions that perform specific tasks and run them together as a complete process.
• Examples include a function that calls three other functions, each returning a modified string of text.
• JavaScript is based on objects, making programming easier and streamlined.
• Making a new object involves defining the object in a user-defined function and using the new keyword to create or instantiate the object.

Defining New Properties to Objects in JavaScript

• Objects can be assigned new properties after creation.
• Property names can be included in the object function for simultaneous creation and property definition.
• The makeCustomer object function assigns a property to the current object.
• Three parameters: customer's name, address, and phone number, are used to define the properties.
• JavaScript allows unlimited property assignments to an object.

Assignment Operators and Return Value

• Assignment operators assign values to left operands based on their right operands.
• Simple assignment operators (=) assign the value of their right operand to its left operand.
• Compound assignment operators are shorthand for operations listed in the table.
• The return value matches the expression to the right of the "=" sign in the "Meaning" column.
• For logical assignments (x &&= y), (x ||= y), and (x??= y), the return value is the logical operation without the assignment.
• When chaining expressions, each assignment is evaluated right-to-left.

JavaScript Destructuring and Comparison Operators

• Destructuring assignment syntax allows for complex data extraction from arrays or objects.
• Comparison operators compare operands and return a logical value based on the comparison's truth.
• Operants can be numerical, string, logical, or object values.
• Strings are compared using Unicode values.
• If operands are not of the same type, JavaScript converts them to an appropriate type.
• Exceptions include the '===' and '!==' operators, which perform strict equality and inequality comparisons.

Arithmetic Operators
• Takes numerical values as operands.
• Returns single numerical value.
• Standard operators: addition (+), subtraction (-), multiplication (*), division (/).
• Functions similarly to other programming languages with floating point numbers.

Bitwise Operators 
• Treat operands as 32-bit set (zeros and ones).
• Operate on binary representations, returning standard JavaScript numerical values.
• Example: decimal number nine has binary representation of 1001.

Bitwise Logical Operators Overview
• Convert operands to 32-bit integers expressed by a series of bits (zeros and ones).
• Discard significant bits from numbers with more than 32 bits.
• Pair each bit in the first operand with the corresponding bit in the second operand.
• Apply the operator to each pair of bits, constructing the result bitwise.
• Example: binary representation of nine is 1001, binary representation of fifteen is 1111.

Bitwise shift operators
• Left shift (<<): Shifts the first operand to the left, discarding excess bits and introducing zero bits from the right.
• Sign-propagating right shift (>>): Shifts the first operand to the right, discarding excess bits and introducing zero bits from the left.
• Zero-fill right shift (>>>): Shifts the first operand to the right, discarding excess bits and introducing zero bits from the left.
• For non-negative numbers, both shifts yield the same result.

Logical Operators
• Typically used with Boolean values, returning a Boolean value.
• && and || operators return the value of one specified operand.
• AND (&&) returns true if both operands are true; otherwise, false.
• OR (||) returns true if either operand is true; otherwise, false.
• NOT (!) returns false if its single operand can be converted to true; otherwise, true.

Short-circuit Evaluation in Logic
• Logic expressions are evaluated left to right using "short-circuit" evaluation rules.
• False evaluates anything to false, and true evaluates anything to true.
• These evaluations are always correct, with no side effects.
• Modern code uses the Nullish coalescing operator (??) for the second case when the first expression is "nullish" or undefined.
• Defaults are provided when valid values like '' or 0 are valid for the first expression.

String Operators 
• Comparison operators for string values.
• Concatenation operator (+) for string concatenation.
• Shorthand assignment operator += for string concatenation.

Conditional Operator in JavaScript
• Only JavaScript operator taking three operands.
• Can have one of two values based on condition.
• True condition yields val1, false condition yields val2.
• Can be used like a standard operator.

Comma Operator Overview
• Evaluates both operands and returns last operand value.
• Primarily used in a for loop for updating multiple variables.
• Often used in separate statements for better clarity.

Unary Operator Overview
• Unary operation with only one operand.
• Delete: Deletes an object's property.
• Array elements deletion: Deletes elements from arrays, but is a bad practice.
• Typeof: Returns a string indicating the type of the unevaluated operand.
• void: Specifies an expression to be evaluated without returning a value.

Relational Operator
• Compares operands and returns a Boolean value based on whether the comparison is true.
• In: Returns true if the specified property is in the specified object.
• Instance of Operator in Java
 - Returns true if the object is of the specified object type.
 - Useful when confirming object type at runtime.
 - Can be used to branch exception-handling code based on exception type.

Operator Precedence
• Determines order of operators applied in expression evaluation.
• Overrided by using parentheses.

Event Bubbling
• Starts at the triggered element.
• An Event Listener is attached to each element.
• Bubbles up to parent elements until reaching the document.
• Triggers listeners on parent elements.
• Can slow down application.
• Example: Bubbles up to parent form, container/divs, body, html element, document, window.

Event Propagation Overview
• Stops "bubbling" of events through DOM.
• Stops all events from parents occurring.

Event Delegation Technique
• Delegates parent element as listener for all event events.
• Targets child element instead of adding Event Listeners to each button.

Regular Expression
• Regular expressions are sequences of characters forming a search pattern.
• They describe what is being searched for in text.
• They can be single characters or complex patterns.
• They perform all types of text search and replace operations.
• Uses RegEx test() method to check if a pattern exists in a string.
• WaldoRegex is case sensitive, meaning a lowercase 'w' would result in a false result.

JavaScript Methods and “this” Keyword 
• Objects can contain functions.
• Example: person object with key, string, and function.
• JavaScript method is an object property with function value.

Accessing Object Methods 
• Uses dot notation for method access.
• Calls an objectName and a key for the method along with '()'.
• Property access only by calling an objectName and a key.
• Example: 'greet' method accessed as 'person.greet()'.
• Only 'person.greet' method provides a function definition.

JavaScript Built-In Methods
• ParseInt() method converts numeric string to integer.

Adding Methods to JavaScript Objects
• Creates empty student object.
• Adds name property.
• Adds greet method.
• Enables addition of method and property to object.

JavaScript this Keyword 
• Uses the 'this' keyword to access an object's properties within a method.
• The keyword contains properties (name, age) and a method 'greet'.
• The keyword is followed by '.' and 'key'.
• When used with an object's method, it refers to the object.
• The function inside an object can access its variable similarly to a normal function.

JavaScript Validation Function
• var mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
• if(inputText.value.match(mailformat)) - Email address is valid if input text value matches mail format.
• document.form1.text1.focus() - Refers to DOM.

JavaScript Switch Statement
• Performs actions based on conditions.
• Evaluation once.
• Comparison with case values.
• Execution of associated code block if match found.

JavaScript Break Keywords
• Break keyword stops execution inside the switch block.
• Not necessary to break last case in a switch block.
• Default keyword specifies code to run if no case match.
• Common code blocks for different switch cases.
• Switching details: First case selected if multiple cases match case value.
• No matching cases: Program continues to default label.
• Strict comparison: Values must match, operands must be of same type.
• Execution of default code block if no match found.

Strings Operations
Creating strings
• Strings can be created as primitives, literals, or objects using the String() constructor.
• String literals can be specified using single or double quotes, or the backtick character.
• A template literal can interpolate expressions.
• Two ways to access individual characters in a string: using the charAt() method or treating the string as an array-like object.
• Bracket notation for character access prevents deleting or assigning values to properties.
• In C, the strcmp() function compares strings, while in JavaScript, less-than and greater-than operators are used.
• The localeCompare() method inherited by String instances can achieve similar results.
• JavaScript distinguishes between String objects and primitive string values.
• String literals and strings returned from String calls are primitive strings.
• JavaScript automatically converts primitives to String objects for primitive string methods.
• Primitives and String objects give different results when using eval().
• Code may break when encountering String objects instead of primitive strings.
• A String object can always be converted to its primitive counterpart with the valueOf() method.

On-event Handlers
• On-event handlers are properties offered by DOM elements to manage how elements react to events.
• Elements can be interactive or non-interactive, and events include actions like clicking, detecting keys, and getting focus.
• An on-event handler can be specified using an HTML attribute or a property from JavaScript.
• Each object can have only one on-event handler for a given event, but can call multiple sub-handlers.
• On-event handlers are called automatically, not at the programmer's will.
• When an event handler is specified as an HTML attribute, it is wrapped into a function with parameters like event, source, lineno, colno, and error.
• The event parameter contains the error message as a string.
• The event handler's return value determines if the event is cancelled.
• The term event handler refers to any function or object registered to be notified of events.
• The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.

Event handlers specific rules
• Supported by all HTML elements except body and frameset.
• Supported by all Document objects as event handler IDL attributes.
• Supported by all Window objects as event handler IDL attributes.
• Associated content and IDL attributes exposed on all Window object's Documents.

Event Handlers for All HTML5 Elements & document & window Objects
• Onabort: Invoked when an event has been aborted.
• Oncancel: Cancel event handler.
• Oncanplay: Invoked when the browser/user agent can start playing media but hasn't yet due to buffering.
• Oncanplaythrough: The browser/user agent estimates that if playback were to begin now, the media resource could be rendered at the current playback rate all the way to its end without having to stop for further buffering.
• Onchange: User has changed the object, then attempts to leave that field.
• Onclick: Invoked when the user clicked on the object.
• Oncuechange: Cuechange event handler.
• Ondblclick: Invoked when the user clicked twice on the object.
• Ondurationchange: Invoked when the length of the media is changed.
• Onemptied: Invoked when a media resource element suddenly becomes empty.
• Onended: Invoked when the media has reached the end.
• Oninput: Input event handler.
• Oninvalid: Invalid event handler.
• Onkeydown: Invoked when a key was pressed over an element.
• Onkeyup:Invoked when a key was released over an element.
• Onloadeddata: Invoked when the browser/user agent can render the media data at the current playback position for the first time.
• Onloadedmetadata: Invoked when the browser/user agent has just determined the duration and dimensions of the media resource.
• Onloadstart: Invoked when the browser/user agent has started loading the media resource.
• Onmousedown: Invoked when the cursor moved over the object and the mouse/pointing device was pressed down.
• Onmouseenter: Invoked when the cursor entered the outer element.
• Onmouseleave : The cursor leaves the element.
• Onmousemove: Invoked when the cursor moved while hovering over an object.
• Onmouseout: Moves cursor off object.
• Onmouseover: Moves cursor over object.
• Onmouseup: Releases mouse/pointing device after pressing down.
• Onmousewheel: Invoked when the mouse wheel is being rotated.
• Onpause: Invoked when the media resource has been paused.
• Onplay: Invoked when media resource starts playback.
• Onplaying: Indicates that playback has begun.
• Onprogress: Indicates that the browser/user agent is fetching media data.
• Onratechange: Invoked when the playback rate has changed.
• Onreset: Resets event handler.
• Onseeked: Invoked when the seeking IDL attribute changes to false or true.
• Onselect: Invoked when the contents of an object are selected.
• Onshow: Show event handler.
• Onstalled: Invoked when the browser/user agent is trying to fetch media data but the data has stalled.
• Onsubmit: User submitted a form.
• Onsuspend: The browser/user agent is not currently fetching media data but has not yet downloaded the entire media resource.
• Ontimeupdate: Invoked when the media's current playback position changed.
• Ontoggle: Invoked when the details element is opened or closed.
• onvolumechange: Invoked when volume or muted attribute changes.
• onwaiting: Expects next frame to become available.

Dynamic HTML
• Combines CSS and JavaScript to create dynamic web pages.
• Changes can range from text font, color, and style to page content and object movement.
• Changes to HTML objects can be made through class changes or using the object's style property.
• JavaScript functions can be designed to reference objects directly, pass an object id as an argument, or access objects using an event.

Static vs dynamic website
 Static Website:
 • Content is fixed and pre-written
 • Same for all visitors
 • Faster loading times
 • Easier to maintain
 • Less flexible for updates
 Dynamic Website:
 • Content can change based on user or situation
 • More interactive and personalized experience
 • Slower loading times
 • More complex to maintain
 • More flexible for updates

Date Object
• The Date object is a built-in object in JavaScript that stores date and time.
• It provides methods for formatting and managing this data.
• A new Date instance without arguments creates an object corresponding to the current date and time.
• The current date and time are broken up and printed in a human-readable format.
• The date is understood based on a timestamp derived from Unix time, which is the number of milliseconds since midnight on January 1st, 1970.
• Epoch time, also known as zero time, is represented by the date string 01 January, 1970 00:00:00 Universal Time (UTC) and the 0 timestamp.
• Both the timestamp and the date string are important concepts in JavaScript.
• There are four formats for creating a new Date in JavaScript, including the current time default, timestamp, date string, or specifying specific dates and times.
• The timestamp method uses a negative number for dates prior to Epoch time.
• The date and time method sets seconds and milliseconds to 0.
• Missing numbers default to 0, but order cannot be changed.
• July month is represented by 6, not 7, as date and time numbers start from 0.

Retrieving the Date with get  
• Date components can be accessed using built-in methods.
• Methods return date parts relative to local timezone.
• Each method starts with 'get' and returns a relative number.
• Table of 'get' methods of the Date object provided.

Modifying the Date with set  
• Set methods modify date components.
• Get methods retrieve specific date components.
• Detailed chart of set methods for Date object.
• Can modify one, more, or all date components.

Date Methods with UTC  
• Get methods retrieve date components based on user's local timezone settings.
• GetUTC methods calculate time based on UTC (Coordinated Universal Time) standard.
• UTC methods for JavaScript Date object display current hour and UTC timezone hour.
• UTC provides an international time standard reference, ensuring code consistency across timezones.

Adding and Subtracting from a Given Date  
Date Setters Overview
• Expect interval-appropriate values.
• SetDays() setter expects day from 1 to 31.
• Day values outside range rolled over/back into next/preceding month(s).

Keyboard Events
Keydown Event:
• User presses down a key on the keyboard.
• Handled with the onkeydown event handler.
• An alert message is displayed when the keydown event occurs.

Keyup Event:
• User releases a key on the keyboard.
• Handled with the onkeyup event handler.
• An alert message is displayed when the keyup event occurs.

Keypress Event:
• User presses down a key with a character value.
• Handled with the onkeypress event handler.

Form Events
• Fired when form control receives/losses focus.
• Fired when user modifies form control value.
• Examples: typing text, selecting options.
• Here are some of the most important form events and their event handlers:
  • Focus Event (onfocus): Handles user's focus on an element on a web page.
  • Blur Event (onblur): Handles user's shift of focus from a form element or window.
  • Change Event (onchange): Handles user's alteration of form element value.
  • Submit Event (onsubmit): Handles user's submission of a form on a web page.
  • Alert messages can be displayed when the user submits a form to the server.

Document/Window Events
Document/Window Events and Event Handlers

• Load Event: Triggered when a web page finishes loading.
• Unload Event: Handled when a user leaves the current web page.
• Resize Event: Handled when a user resizes the browser window.
• Onresize Event: Handled when the browser window is minimized or maximized.
• Alert messages displayed when the user resizes the window to a new width and height.

Creating an Image Slider



Program Flowcharts
• The program flowchart illustrates the logic of the program and gives details on manipulating the data.
• It is less costly to determine, arrange and rearrange complex logic on a flowchart than to correct logic errors in an implemented program.
• A  program flowchart is vital if the program is to be maintained easily and efficiently or if modifications are necessary.

Program flowchart symbols
• Program flowcharts are constructed with a set of standardised symbols that make it easier for persons other than the original programmer to read and maintain the program.
  • Start/End Symbol - The terminator symbol marks the starting or ending point of the system. It usually contains the word "Start" or "End."
  • Action or Process Symbol - A box can represent a single step ("add two cups of flour"), or an entire sub-process ("make bread") within a larger process.
  • Arrow - Indicates the flow of the algorithm pathways.
  • Decision Symbol - A decision or branching point. Lines representing different decisions emerge from different points of the diamond.
  • Input/Output Symbol - Represents material or information entering or leaving the system, such as customer order (input) or a product (output)
  • Subroutine Symbol - Indicates a sequence of actions that perform a specific task embedded within a larger process. This sequence of actions could be described in more detail on a separate flowchart.

Program Flowchart Best Practices
• While you might want to make your Program Flowchart a bit pleasant to the eye, it is advised that you use the standardized symbols.
• To make a flow chart your flow chart interesting you can use different colours for your symbols and/or labels below is a list of things that you should pay attention to when creating program flowchartsUsing appropriate symbols Flow direction that is inconsistent Colour schemes/colour coding.
• Having consistent symbol sizes Having consistent spacing between your symbols

Javascript For Loop
• Loops can execute a block of code a number of times and are handy if you want to run the same code over and over again, each time with a different value.
• Often this is the case when working with arrays:Instead of writing:text += cars[0] + "<br>";text += cars[1] + "<br>";text += cars[2] + "<br>";text += cars[3] + "<br>";text += cars[4] + "<br>";text += cars[5] + "<br>";You can write:var i;for (i = 0; i < cars.length; i++) {  text += cars[i] + "<br>";}

JavaScript supports different kinds of loops:
• for - loops through a block of code a number of times 
• for/in - loops through the properties of an object 
• for/of - loops through the values of an iterable object  
• while - loops through a block of code while a specified condition is true 
• do/while - also loops through a block of code while a specified condition is true


The main thing I did to optimize my images was compress them.
• The service that I used to compress my images was Optimizilla, an easy-to-use website where you upload your images, select the level of compression you want, and then download the compressed image.
• I saw size decreases upwards of 70% for some of my resources, which goes a LONG way towards faster load times.
• Optimizilla is hardly the only choice for your image compression needs.






